


name: Request GPL Source

on:
  workflow_dispatch:
    inputs:
      mailto:
        description: 'Email To'
        required: true
        default: "support@mikrotik.com,mt@mikrotik.com"
  schedule:
    - cron: "0 0 * * *"

permissions: write-all

jobs:
  check:
    runs-on: ubuntu-latest
    name: Check New Version
    outputs:
      versions: ${{ steps.needs-versions.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get RouterOS "stable" version
        id: get-stable
        run: |
          ROSVER=`curl -s https://upgrade.mikrotik.com/routeros/NEWESTa7.stable | awk 'FS=" " {print $1}'`
          echo version=$ROSVER >> $GITHUB_OUTPUT
          echo $ROSVER
      - name: Get RouterOS "testing" version
        id: get-testing
        run: |
          ROSVER=`curl -s https://upgrade.mikrotik.com/routeros/NEWESTa7.testing | awk 'FS=" " {print $1}'`
          echo version=$ROSVER >> $GITHUB_OUTPUT    
          echo $ROSVER
      - name: Check "stable" channel is release
        id: has-stable
        uses: insightsengineering/release-existence-action@v1.0.0
        with:
          release-tag: ${{ steps.get-stable.outputs.version }}
      - name: Check "testing" channel is release
        id: has-testing
        uses: insightsengineering/release-existence-action@v1.0.0
        with:
          release-tag: ${{ steps.get-testing.outputs.version }}
      - name: Build Versions for Build "Matrix"
        id: needs-versions
        uses: actions/github-script@v6
        with:
          result-encoding: json
          script: |
            var versions = []
            if (!${{ steps.has-stable.outputs.release-exists }}) {
              versions.push("${{ steps.get-stable.outputs.version }}")
            }
            if (!${{ steps.has-testing.outputs.release-exists }}) {
              versions.push("${{ steps.get-testing.outputs.version }}")
            }
            console.log(versions)
            return versions
      - name: Log Results
        run: |
          echo '${{ steps.needs-versions.outputs.result }}'
          echo '${{ fromJSON(steps.needs-versions.outputs.result)[0] != null }}'
  sendmail:
    needs: check
    env:
      mailto: ${{ github.event.inputs.mailto || 'support@mikrotik.com,mt@mikrotik.com' }}
    permissions:
      contents: write

    name: Request GPL Source Code via Email

    runs-on: ubuntu-latest
    
    if: ${{ fromJSON(needs.check.outputs.versions)[0] != null }}

    strategy:
      matrix:
        version: ${{ fromJSON(needs.check.outputs.versions) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt update
          sudo -E apt -y install curl

      - name: Upload Firmware to release
        uses: ncipollo/release-action@v1
        with:
          name: ${{matrix.version}}
          allowUpdates: true
          removeArtifacts: true
          tag: ${{matrix.version}}
          commit: main
          token:  ${{ secrets.GITHUB_TOKEN }}
          artifacts: ./*
